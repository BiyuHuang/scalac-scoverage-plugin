IN PROGRESS

BACKLOG
* sbt merge reports plugin
* Location URL from report should restore state
* memory usage optimizations: load coverage data only for report generation?
* fold imports in source view?
* sbt incremental build support? "conditional coverage datafile updating"
* scala-code html highlighting?
* multi-threading support?
* idea plugin
* eclipse plugin
* maven plugin to easy configuration

BLOCK
* reconfigure sbt root project instead of 2 separate projects, prob. impossible until sbt plugin can use 2.8.

DONE
* maven support, preliminary
* reportDir.mkDirs
* reporting: scroll to selected class on click.
* reporting pages are broken on non-FF browsers: need break-hints on dir "/"'s on source file name in detail view. => &#x200B;
* reinstall maven repo usage (earlier, it broke ivy caching somehow....)
* Constructor instrumentation fails when: "class Foo extends { val x = y } with SomeTrait"
* windows CRLF broken on 2.8
* reporting: if only 1 package, open it automatically
* sbt-multiproject support: need to read all req. props on startup -> Env -kinda class
* Use scala 2.8 final
* sbt-plugin: cleanup and fix scctJar location (=defScalaVersion.value)
* backport 2.8 changes to 2.7.7 branch?
* 2.8: sbt-plugin fixes
* reporting: jquery-search by classname?
* 2.8: self-test
* 2.8: package root is always shown in report - empty package-objects are created?
* 2.8: rewrite intrumentation plugin to pretransform instead of posttransform
* 2.8: fix package naming
* 2.8: fix tab positioning
* 2.8: fix annotations
* improve loading of coverage.data file
* check: class uncovered extends StaticAnnotation
* check: @serializable sealed abstract class ClassType - ok, caused by selfinstrumentation starting after class creation.
* better bootstrapping approach
* go to select class in report when overview class clicked
* classes which are completely skipped (with eg. @uncovered don't show in report!)
* better linking: need to have coveredblock-placeholders where classes/traits/objects start, now first block can be too far from class declaration
* self-test
* annotation for skipping instrumentation
* while / doWhile -instrumentation support.
* check: trait abstract types & symbol support = 'mySymbol
* sbt: running "test" before causes non-instrumented test run when "test-coverage" called after.
* why does sbt test-coverage something report no unit tests to run? Always happens: sbt clean && sbt test-coverage
* case class inside class -instrumentation?
* Check return X -instrumentation
* jquery show/hide package contents
* basic linking in reports: className on sourcepage.
* companion object apply/unapply shouldn't be instrumented
* object default constructor should _not_ be instrumented
* (sealed) case class constructor instrumentation?
* add throw to body instrumentation?
* val x = Apply doesn't get instrumented
* case x => Apply doesn't get instrumented
* try { Apply } catch { x } finally { Apply } doesn't get instrumented
* html-report: Merge non-covered spans which are next to each other!
* bigger sourceFileName font-size
* Fix tab-rendering on lines + column-position fix, see withIf-test in test-project
* Clean up source file name, remove extra pre-dirs.
* remove pkg-names from classNames in packageLists
* Strip $anon-classes from class lists -> merged with parent.
* Support for object, class and trait of same name!
* Sort packages and classes in pkg and classes in src-file in report pages!
* add fully-qualified classnames to data --> summary should use those...
* sbt plugin
* sbt-build
* basic html report with colors & calculation
* add column to info, so can color appropriately
* support for most types of code
* calls to coverage for each apply in a block
* show source code with coveragedata when source file paths given to testrun
* instrumentation to refchecks or some other later phase
* serialize for now instead of pickle = easier, revert to pickle once data model done
* local git repo

